<h1>
  NEW MAINTENANCE
</h1>

<div class="field">
  <label class="label">Facility</label>
  <div class="control">  
    <div class="select">
      <select id="facility-selector">
        <option selected value="0" > - Select - </option>
        <% @facilities.each do |facility| %>
            <option value=<%= facility.id %> ><%= facility.name %></option>
        <% end %>
      </select>
    </div>
  </div>
</div>

<div class="field">
  <label class="label">Area</label>
  <div class="control">  
    <div class="select">
      <select id="area-selector" disabled>
        <option selected value="0" > - Select - </option>
      </select>
    </div>
  </div>
</div>

<div class="field">
  <label class="label">Device</label>
  <div class="control">  
    <div class="select">
      <select id="device-selector" disabled>
        <option selected value="0" > - Select - </option>
      </select>
    </div>
  </div>
</div>

<button class="button" id="button-selector" disabled>
  <%= link_to "Generate report", '/maintenance_report/1' %>
</button>



<script>
  var facilitiesSelect = document.querySelector('#facility-selector')
  var areaSelect = document.querySelector('#area-selector')
  var deviceSelect = document.querySelector('#device-selector')
  var buttonSelect = document.querySelector('#button-selector')
  var defaultOption = document.createElement('option')
  
  defaultOption.value = 0
  defaultOption.innerHTML = ' - Select - '
  
  facilitiesSelect.addEventListener('change', (e) => {
    var facility_id = e.target.value 
    areaFlag=false
    if (facility_id != 0){
      areaSelect.innerHTML = ''
      axios.get('areas.json').then(res => {
        var areas = res.data.filter(area => area.facility_id == facility_id)
        if (areas.length > 0) {
          areaFlag=true
          areaSelect.removeAttribute('disabled');
          areas.forEach(area => {
            var opt = document.createElement('option');
            opt.value = area.id;
            opt.innerHTML = area.name;
            areaSelect.appendChild(opt);
          })
        } else {
          areaSelect.setAttribute('disabled', 'disabled')
          areaSelect.appendChild(defaultOption)
        }
      })
    } else {
      areaSelect.setAttribute('disabled', 'disabled')
      deviceSelect.setAttribute('disabled', 'disabled')
    }
  })
  
  areaSelect.addEventListener('change', (e) => {
    var area_id = e.target.value 
    buttonSelect.setAttribute('disabled', 'disabled')

    if (area_id != 0){
      deviceSelect.innerHTML = ''
      axios.get('devices.json').then(res => {
        var devices = res.data.filter(device => device.area_id == area_id)
        if (devices.length > 0) {

          buttonSelect.removeAttribute('disabled')
          deviceSelect.removeAttribute('disabled')
          devices.forEach(device => {
            var opt = document.createElement('option');
            opt.value = device.id;
            opt.innerHTML = device.name;
            deviceSelect.appendChild(opt);
          });
        } else {
          deviceSelect.setAttribute('disabled', 'disabled')
          deviceSelect.appendChild(defaultOption)
        }
        
      })
    } else {
      areaSelect.setAttribute('disabled', 'disabled')
    }
  })


</script>